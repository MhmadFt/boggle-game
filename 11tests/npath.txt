  # def is_valid_path_length(path, length):
    #     return len(path) == length
    #
    # def is_word_on_board(word, path):
    #     board_word = ''.join([board[x][y] for x, y in path])
    #     return word == board_word
    #
    # paths = []
    # for word in words:
    #     for i in range(len(board)):
    #         for j in range(len(board[i])):
    #             start = (i, j)
    #             valid_paths = find_length_n_paths_helper([start], board[i][j], n, {word}, board, words)
    #             for path in valid_paths:
    #                 if is_valid_path_length(path, n) and is_word_on_board(word, path):
    #                     paths.append(path)
    # return paths